@Injectable()
export class AuthService {
  constructor(
    private userService: UserService,
    private trainerService: TrainerService,
    private jwtService: JwtService,
    private refreshTokenStore: RefreshTokenStore,
  ) {}

  async verifyLogin(dto: LoginDto) {
    let user: AuthUser | null;

    if (dto.role === 'trainer') {
      user = await this.trainerService.findByEmail(dto.email);
    } else {
      user = await this.userService.findByEmail(dto.email);
    }

    if (!user || !this.validatePassword(dto.password, user.password)) {
      throw new UnauthorizedException('Invalid credentials');
    }

    const accessToken = this.jwtService.sign({ sub: user._id, role: user.role }, { expiresIn: '15m' });
    const refreshToken = this.jwtService.sign({ sub: user._id, role: user.role }, { expiresIn: '7d' });

    await this.refreshTokenStore.save(user._id, refreshToken);

    return { accessToken, refreshToken };
  }
}
